
// Inline methods

static void print_recordset_as_table(Row_list_t const& recordset, std::ostream &out) {
  fcs::orm::print_recordset_as_table< #{@table.class_name} >(recordset, out);
}

static void print_values_as_table(Value_list_t const& values, std::ostream &out) {
  fcs::orm::print_values_as_table< #{@table.class_name} >(values, out);
}

static std::string table_name() {
  return std::string("#{@table.name}");
}

static char const* value_field_name(#{@table.value_enum_scoped_name} field) {
  char const* value_field_names[] = {
    #{@table.value_columns.collect { |c| %Q{"#{c.name}"} }.join(",
    ")}
  };
  return value_field_names[field];
}

static bool has_auto_id() {
  return #{@table.pk_columns.select{ |c| c.auto_increment}.length>0? "true" : "false"};
}

int select_last_insert_id() {
  int result(0);
  otl_stream stream(1, "SELECT LAST_INSERT_ID()", *connection_);
  if(!stream.eof()) {
    stream >> result;
  }
  return result;
}

int select_affected_row_count() {
  int result(0);
  otl_stream stream(1, "SELECT ROW_COUNT()", *connection_);
  if(!stream.eof()) {
    int signed_result(0);
    stream >> signed_result;
    result = (signed_result < 0)? 0 : signed_result;
  }
  return result;
}

int select_table_row_count() {
  int result(0);
  otl_stream stream(1, "SELECT COUNT(*) FROM #{@table.name}", *connection_);
  if(!stream.eof()) {
    stream >> result;
  }
  return result;
}

inline bool add_where_pkey_clause_max_additions(typename Pkey_list_t::const_iterator &begin,
                                                typename Pkey_list_t::const_iterator end,
                                                std::string &sql_stmt, 
                                                size_t max_additions = 0) {
  bool result(false);
  std::ostringstream msg;
  size_t count(0);
  if(begin != end) {
    msg << "WHERE ";
    while(true) {
      msg << '('
<?rb terms = [] ?>
<?rb @table.pk_columns.map do |column| ?>
<?rb if column.requires_quote ?>
<?rb terms << %Q{<< "(#{column.name} = " << fcs::orm::sql_quote(begin->#{column.name}_).c_str() << ')'} ?>
<?rb else ?>
<?rb terms << %Q{<< "(#{column.name} = " << begin->#{column.name}_ << ')'} ?>
<?rb end ?>
<?rb end ?>
          #{terms.join(' << " AND "
          ')}
          << ')';

      ++count;
      ++begin;

      if(begin == end) {
        result = true;
        break;
      } else if(max_additions && (count == max_additions)) {
        result = false;
        break;
      } else {
        msg << " OR ";
      }
    }
  }
  sql_stmt += msg.str();
  return result;
}

<?rb if @me.supports_select_all ?>
inline void select_all_rows(Row_list_t &found, std::string const& where_clause = "") {

  std::string select_stmt("SELECT "
    "#{@table.columns.map { |col| %Q/#{col.name}/ }.join(%Q/, "#{Codegen::NL}    "/)} "
    "FROM #{@table.name} ");

  if(!where_clause.empty()) {
    select_stmt += where_clause;
  }

  otl_stream stream(50, select_stmt.c_str(), *connection_);

  while(!stream.eof()) {
    Row_t row;
    #{@table.pkey_class} & pkey(row.first);
    #{@table.value_class} & value(row.second);
    stream
<?rb @table.columns.each do |column| ?>
<?rb if column.primary_key ?>
      >> pkey.#{column.name}_
<?rb else ?>
      >> value.#{column.name}_
<?rb end ?>
<?rb end ?>
      ;
    found.push_back(row);
  }
}
<?rb end ?>

<?rb if @me.supports_select_by_pkey ?>
inline bool find_row(#{@me.table.pkey_class} const& desideratum, #{@me.table.value_class} & found) {
  bool result(false);
  otl_stream stream(50, "SELECT "
    "#{@table.value_columns.map { |col| %Q/#{col.name}/ }.join(%Q/, "#{Codegen::NL}    "/)} "
    "FROM #{@table.name} "
    "WHERE "
<?rb clauses = [] ?>
<?rb @table.columns.each do |column| ?>
<?rb if column.primary_key ?>
<?rb   clauses.push %Q/"#{column.name}=:#{column.name}<#{column.otl_type}>"/ ?>
<?rb end ?>
<?rb end ?>
    #{clauses.join(%{ 
    " AND " })}, 
    *connection_);

  stream 
<?rb @table.columns.each do |column| ?>
<?rb if column.primary_key ?>
    << desideratum.#{column.name}_
<?rb end ?>
<?rb end ?>
    ;

  while(!stream.eof()) {
    stream
<?rb @table.columns.each do |column| ?>
<?rb if !column.primary_key ?>
      >> found.#{column.name}_
<?rb end ?>
<?rb end ?>
      ;
    result = true;
  }
  return result;
}

inline void find_rows(Pkey_list_t const& desideratum, Value_list_t & found) {
  typename Pkey_list_t::const_iterator end(desideratum.end());
  for(typename Pkey_list_t::const_iterator it(desideratum.begin()); it != end; ++it) {
    #{@me.table.value_class} value;
    if(find_row(*it, value)) {
      found.push_back(value);
    }
  }
}

<?rb end ?>
<?rb if @me.supports_find_row_by_value ?>
inline bool find_row_by_value(Row_t & desideratum) {
  otl_stream stream(50, "SELECT "
    "#{@table.pk_columns.map { |col| %Q/#{col.name}/ }.join(%Q/, "#{Codegen::NL}    "/)} "
    "FROM #{@table.name} "
    "WHERE "
<?rb clauses = [] ?>
<?rb @table.columns.each do |column| ?>
<?rb if !column.primary_key or !column.auto_increment ?>
<?rb   clauses.push %Q/#{column.name} = :#{column.name}<#{column.otl_type}>/ ?>
<?rb end ?>
<?rb end ?>
    "#{clauses.join(%Q/ AND " #{Codegen::NL}    "/)}", *connection_);

  stream 
<?rb @table.columns.each do |column| ?>
<?rb if !column.primary_key ?>
    << desideratum.second.#{column.name}_
<?rb end ?>
<?rb end ?>
    ;

  bool found(false);
  while(!stream.eof()) {
    found = true;
    stream
<?rb @table.columns.each do |column| ?>
<?rb if column.primary_key ?>
      >> desideratum.first.#{column.name}_
<?rb end ?>
<?rb end ?>
      ;
  }
  return found;
}

<?rb end ?>
<?rb if @me.supports_insert ?>
inline void insert(Row_t const& nascent) {
  otl_stream stream(50, "INSERT INTO #{@table.name} (" 
<?rb clauses = [] ?>
<?rb @table.columns.each do |column| ?>
<?rb if !column.primary_key or !column.auto_increment ?>
<?rb   clauses.push column.name ?>
<?rb end ?>
<?rb end ?>
    "#{clauses.join(%Q/," #{Codegen::NL}    "/)}"
    ") VALUES ("
<?rb clauses = [] ?>
<?rb @table.columns.each do |column| ?>
<?rb if !column.auto_increment ?>
<?rb   clauses.push %Q/:#{column.name}<#{column.otl_type}>/ ?>
<?rb end ?>
<?rb end ?>
    "#{clauses.join(%Q/," #{Codegen::NL}    "/)})", *connection_);

  stream 
<?rb @table.columns.each do |column| ?>
<?rb if !column.primary_key ?>
    << nascent.second.#{column.name}_
<?rb elsif !column.auto_increment ?>
    << nascent.first.#{column.name}_
<?rb end ?>
<?rb end ?>
    ;

}

<?rb end ?>
<?rb if @me.supports_insert_ignore.include? @table.name.to_sym ?>
inline void insert_ignore(Row_t const& nascent) {
  otl_stream stream(50, "INSERT IGNORE INTO #{@table.name} (" 
<?rb clauses = [] ?>
<?rb @table.columns.each do |column| ?>
<?rb if !column.primary_key or !column.auto_increment ?>
<?rb   clauses.push column.name ?>
<?rb end ?>
<?rb end ?>
    "#{clauses.join(%Q/," #{Codegen::NL}    "/)}"
    ") VALUES ("
<?rb clauses = [] ?>
<?rb @table.columns.each do |column| ?>
<?rb if !column.auto_increment ?>
<?rb   clauses.push %Q/:#{column.name}<#{column.otl_type}>/ ?>
<?rb end ?>
<?rb end ?>
    "#{clauses.join(%Q/," #{Codegen::NL}    "/)})", *connection_);

  stream 
<?rb @table.columns.each do |column| ?>
<?rb if !column.primary_key ?>
    << nascent.second.#{column.name}_
<?rb elsif !column.auto_increment ?>
    << nascent.first.#{column.name}_
<?rb end ?>
<?rb end ?>
    ;

}

<?rb end ?>
<?rb if @me.supports_insert ?>
inline void insert(Row_list_t const& nascent, int stream_buffer_size = 1) {
  if(nascent.empty()) {
    return;
  }
  otl_stream stream(stream_buffer_size, "INSERT INTO #{@table.name} (" 
<?rb clauses = [] ?>
<?rb @table.columns.each do |column| ?>
<?rb   clauses.push column.name ?>
<?rb end ?>
    "#{clauses.join(%Q/," #{Codegen::NL}    "/)}"
    ") VALUES ("
<?rb clauses = [] ?>
<?rb @table.columns.each do |column| ?>
<?rb if column.auto_increment ?>
<?rb   clauses.push %Q/:#{column.name}<char[3]>/ ?>
<?rb else ?>
<?rb   clauses.push %Q/:#{column.name}<#{column.otl_type}>/ ?>
<?rb end ?>
<?rb end ?>
    "#{clauses.join(%Q/," #{Codegen::NL}    "/)})", *connection_);

  Row_list_t::const_iterator it(nascent.begin());
  Row_list_t::const_iterator end(nascent.end());
  
  for(; it != end; ++it) {
    stream 
<?rb @table.columns.each do |column| ?>
<?rb if column.auto_increment ?>
      << "" // auto_id - #{column.name} leave blank
<?rb elsif column.primary_key ?>
      << it->first.#{column.name}_
<?rb else ?>
      << it->second.#{column.name}_
<?rb end ?>
<?rb end ?>
      ;
  }

}

<?rb end ?>
<?rb if @me.supports_update_by_pkey ?>
inline void update(Row_list_t const& changing) {
  if(changing.empty()) {
    return;
  }
  otl_stream stream(1, "UPDATE #{@table.name} SET " 
<?rb clauses = [] ?>
<?rb @table.value_columns.each do |column| ?>
<?rb   clauses.push %Q/#{column.name}=:#{column.name}<#{column.otl_type}>/ ?>
<?rb end ?>
    "#{clauses.join(%Q/," #{Codegen::NL}    "/)}"
    " WHERE "
<?rb clauses = [] ?>
<?rb @table.pk_columns.each do |column| ?>
<?rb   clauses.push %Q/#{column.name}=:#{column.name}<#{column.otl_type}>/ ?>
<?rb end ?>
    "#{clauses.join(%Q/ AND " #{Codegen::NL}    "/)}", *connection_);

  Row_list_t::const_iterator it(changing.begin());
  Row_list_t::const_iterator end(changing.end());
  
  for(; it != end; ++it) {
    stream 
<?rb @table.value_columns.each do |column| ?>
      << it->second.#{column.name}_
<?rb end ?>
<?rb @table.pk_columns.each do |column| ?>
      << it->first.#{column.name}_
<?rb end ?>
      ;
  }
}

inline void update(#{@me.table.pkey_class} const& changing, 
                   #{@table.value_field_update_class} const& updates) {
  if(!updates.empty()) {
    std::ostringstream sql_statement;
    sql_statement << "UPDATE #{@table.name} SET ";
    #{@table.value_field_update_class}::const_iterator begin(updates.begin());
    #{@table.value_field_update_class}::const_iterator it(updates.begin());
    #{@table.value_field_update_class}::const_iterator end(updates.end());
    for(; it != end; ++it) {

      if(it != begin) {
        sql_statement << ',';
      }

      sql_statement << value_field_name(it->first) << '=';
      switch(it->first) {
<?rb @table.value_columns.each do |column| ?>
        case #{column.value_enum_scoped_name}: {
<?rb if column.requires_quote ?>
          sql_statement << fcs::orm::sql_quote(boost::any_cast< #{column.cpp_type} const& >(it->second));
<?rb else ?>
          sql_statement << boost::any_cast< #{column.cpp_type} const& >(it->second);
<?rb end ?>
          break;
        }
<?rb end ?>
      }
    }
<?rb clauses = [] ?>
    sql_statement 
      << " WHERE "
<?rb @table.pk_columns.each do |column| ?>
<?rb if column.requires_quote ?>
<?rb clauses.push %Q{" #{column.name} = " << fcs::orm::sql_quote(changing.#{column.name}_)} ?>
<?rb else ?>
<?rb clauses.push %Q{" #{column.name} = " << changing.#{column.name}_} ?>
<?rb end ?>
<?rb end ?>
      << #{clauses.join(%{
      << " AND " })};
    otl_stream stream(1, sql_statement.str().c_str(), *connection_);
  }
}

<?rb end ?>
<?rb if @me.supports_delete_by_pkey ?>
inline void delete_row(#{@me.table.pkey_class} const& moribund) {
  otl_stream stream(50, "DELETE "
    "FROM #{@table.name} "
    "WHERE "
<?rb clauses = [] ?>
<?rb @table.columns.each do |column| ?>
<?rb if column.primary_key ?>
<?rb   clauses.push %Q/"#{column.name}=:#{column.name}<#{column.otl_type}>"/ ?>
<?rb end ?>
<?rb end ?>
    #{clauses.join(%{ 
      " AND " })}, 
    *connection_);

  stream 
<?rb @table.columns.each do |column| ?>
<?rb if column.primary_key ?>
    << moribund.#{column.name}_
<?rb end ?>
<?rb end ?>
    ;
}

inline void delete_rows(Pkey_list_t const& moribund, size_t max_per_call = 0) {
  bool more_to_delete(!moribund.empty());
  typename Pkey_list_t::const_iterator it(moribund.begin());
  while(more_to_delete) {
    std::string delete_statement("DELETE FROM #{@table.name} ");
    more_to_delete = !add_where_pkey_clause_max_additions(it, moribund.end(), delete_statement, max_per_call);
    otl_stream stream(1, delete_statement.c_str(), *connection_);
  }
}

<?rb end ?>
<?rb if @me.supports_delete_all ?>
inline size_t delete_all_rows() {
  long rows_deleted(otl_cursor::direct_exec(*connection_, "DELETE FROM #{@table.name}"));
  return size_t(rows_deleted);
}

<?rb end ?>

<?rb ### @table.columns.each_pair do |column_name, column| ?>
<?rb ####{column.cpp_type} #{column_name}; ?>
<?rb ### end ?>
