<?rb NL=Codegen::NL if not NL ?>
<?rb if @c.descr ?>
#{Codegen.block_comment(@c.descr)}
<?rb end ?>
class #{@c.tname} { 
<?rb @c.members.each do |m| ?>
<?rb if m.descr ?>

#{Codegen.indent_absolute_text(Codegen.block_comment(m.descr),1) if m.descr}
<?rb end ?>
<?rb if m.init.nil? or @c.has_ctors? ?>
  #{m.final_tag}#{m.type} #{m.vname};
<?rb else ?>
  #{m.final_tag}#{m.type} #{m.vname} = #{m.init};
<?rb end ?>
<?rb if m.readable ?>
  #{m.type} get #{m.name} => #{m.vname};
<?rb end ?>
<?rb if m.writable ?>
  set #{m.name}(#{m.type} #{m.name}) => #{m.vname} = #{m.name};
<?rb end ?>
<?rb end ?>
<?rb @c.ctors.keys.sort.each do |ctor| ?>

<?rb ctor_name = (ctor=='default' and @c.name or "#{@c.name}.#{ctor}") ?>
<?rb args = @c.ctors[ctor][:args].map {|m| m.as_arg } ?>
<?rb oargs = @c.ctors[ctor][:opt_args] ?>
<?rb opt_args = oargs.map {|m| m.as_opt_arg } ?>
<?rb nargs = @c.ctors[ctor][:named_args] ?>
<?rb named_args = nargs.map {|m| m.as_named_arg } ?>
<?rb initializers = @c.ctors[ctor][:args].map {|m| m.initializer } + @c.members.select{|m| (not @c.ctors[ctor][:args].include?(m)) and not m.ctor_init.nil?  }.map{|m| m.initializer } ?>
<?rb initializers += oargs.select {|m| m.opt_initializer? }.map { |m| "this.#{m.vname} = ?#{m.name}? #{m.name} : #{m.init}" } ?>
<?rb initializers += nargs.select {|m| m.opt_initializer? }.map { |m| "this.#{m.vname} = ?#{m.name}? #{m.name} : #{m.init}" } ?>
<?rb uses_initializers = (initializers.empty? and "" or " :") ?>
<?rb if not opt_args.empty? ?>
  #{ctor_name}(
<?rb if args.empty? ?>
      [
<?rb else ?>
      #{args.join(','+NL+' '*6)}, [
<?rb end ?>
        #{opt_args.join(','+NL+' '*8)}
      ])#{uses_initializers}
<?rb elsif not named_args.empty? ?>
  #{ctor_name}(
<?rb if args.empty? ?>
      {
<?rb else ?>
      #{args.join(','+NL+' '*6)}, { 
<?rb end ?>
        #{named_args.join(','+NL+' '*8)}
      })#{uses_initializers}
<?rb else ?>
  #{ctor_name}(#{args.join(','+NL+' '*6)})#{uses_initializers}
<?rb end ?>
<?rb if not initializers.empty? ?>
    #{initializers.join(','+NL+' '*4)} 
<?rb end ?>
  { 
<?rb if @c.custom_ctors.include? ctor ?>
#{Codegen.protect_block("#{@c.name}.#{ctor} ctor")}
<?rb end ?>
  }
<?rb end ?>
<?rb if @c.pp ?>

<?rb i = '$'+'{_i_}' ?>
  String pp() { 
    String _i_ = indent();
    String result = """#{i}#{@c.name} {
#{@c.members.map {|m| "#{i}  #{m.name}: $#{m.vname}" }.join(','+NL)}
#{i}}""";
    return result;
  }
<?rb end ?>
<?rb if @c.json ?>

<?rb i = '$'+'{_i_}' ?>
  Map toJson() { 
    return { 
      #{@c.json_members.map {|m| %Q{ "#{m.name}" : #{m.json_out}}}.join(','+NL+'      ')}
    };
  }

  static #{@c.name} fromJson(String json) {
    Map jsonMap = JSON.parse(json);
    #{@c.name} result = new #{@c.name}();
    result._fromJsonMapImpl(jsonMap);
    return result;
  }

  static #{@c.name} fromJsonMap(Map jsonMap) {
    #{@c.name} result = new #{@c.name}();
    result._fromJsonMapImpl(jsonMap);
    return result;
  }

  void _fromJsonMapImpl(Map jsonMap) {
<?rb @c.json_members.each do |m| ?>
<?rb   if val_type = m.map_value_type ?>
<?rb     if @c.class_map.has_key? val_type ?>
    jsonMap["#{m.name}"].forEach((k,v) { 
      #{m.vname}[k] = #{val_type}.fromJsonMap(v);
    });
<?rb     else ?>
    // #{m.name} is good
<?rb     end ?>
<?rb   elsif val_type = m.list_value_type ?>
<?rb     if @c.class_map.has_key? val_type ?>
    #{m.vname} = new #{m.type}();
    jsonMap["#{m.name}"].forEach((v) { 
      #{m.vname}.add(#{val_type}.fromJsonMap(v));
    });
<?rb     else ?>
    // #{m.name} is good
<?rb     end ?>
<?rb else ?>
    #{m.vname} = #{m.json_in};
<?rb end ?>
<?rb end ?>
  }

<?rb end ?>
<?rb if not @c.generated.empty? ?>

#{@c.generated.join(Codegen::NL)}
<?rb end ?>
<?rb if not @c.no_class_impl ?>
#{Codegen.protect_block("#{@c.id} impl")}
<?rb end ?>
}

