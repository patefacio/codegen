
* Description

  Table api provides a means of accessing 2d arrays of data (i.e. tables).

  Table: This is the api header, essentially a set of typedefs

** Original Complex Approach - Abandoned. Too many classes, too heavy
  Table_reader: This is the =abc= providing ability to read data from the tables
  
  The following table readers are supported:

  Delimited_file_table_reader: This =table reader= reads a delimited file.
  (e.g. csv, pipe-separated) and provides ability to read that
  data. It supports the may_grow concept so the file can be growing
  and the data will be picked up.

  Shmem_table_store: This encapsulates a single table backed by shared memory.
  Shmem_table_reader: This provides the ability to read tables from shared memory.
  Shmem_table_writer: This provides the ability to write tables from shared memory.
  A Shmem_table_reader can be attached a Shmem_table_store which can be simultaneously
  written by a separate Shmem_table_writer.

  Memory_table_store: This encapsulates a single table in memory.
  Memory_table_reader: This provides the ability to read tables from memory.
  Memory_table_writer: This provides the ability to write tables from memory.
  (The Memory_table_writer may not be necessary since the writing to the
   store should be convenient and not require much hiding/encapsulation.
   That is different than, say Shmem_table_writer which should encapsulate
   the boost shmem, or the h5_table_writer which should encapsulate hdf5)

  A Memory_table_reader can be attached a Memory_table_store which can be simultaneously
  written by a separate Shmem_table_writer.

  Memory_writer_table_reader: This =table reader= acts as both a data
  store and reader.  Essentially it provides read/write
  capability. Any rows written can then be read with the
  =Table_reader= interface.

** New Simpler Approach
   
   Table_model
   Memory_table_model : public Table_model
   

