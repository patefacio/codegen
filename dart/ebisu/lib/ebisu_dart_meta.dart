/// 
/// Support for storing dart meta data for purpose of generating code. Essentially
/// this is a model of structural code items that comprise dart systems. Things like
/// libraries (Library), classes (Class), class members (Member), pubspecs
/// (PubSpec), etc. A very nice feature of Dart is the dot-dot _.._ operator, which
/// allows one to conveniently string together accessor calls to objects. For
/// example, the following is the structure of the ebisu_id library.
/// 
/// 
///     Library ebisu_id = library('ebisu_id')
///       ..doc = 'Support for consistent use of identifiers...'
///       ..imports = [
///         'io',
///         '"package:ebisu/ebisu.dart"',
///         '"package:ebisu/ebisu_utils.dart" as EBISU_UTILS', 
///         '"package:pathos/path.dart" as path',
///       ]
///       ..parts = [
///         part('id')
///         ..classes = [
///           class_('id')
///           ..doc = "Given an id (all lower case string of words separated by '_')..."
///           ..members = [
///             member('id')
///             ..doc = "String containing the lower case words separated by '_'"
///             ..access = Access.RO
///             ..isFinal = true,
///             member('words')
///             ..doc = "Words comprising the id"
///             ..type = 'List<String>'
///             ..access = Access.RO
///             ..isFinal = true
///           ]
///         ]
///       ];
/// 
/// The libraries are composed into a system and the system is generated. So, all
/// the code structure in ebisu was generated by itself. Code generation of this
/// sort is much more useful in the more verbose languages like C++ where things
/// like ORM, object serialization, object streaming etc are very
/// boilerplate. However some good usecases exist in Dart, like generating the
/// structure of a large Dart library from an existing spec or data input
/// (e.g. imagine trying to create a Dart library to support a FIX specification
/// which is stored in XML). A simple use that is provided as an extension is the
/// ability take a simple Altova UML model in XMI format and convert it to Dart
/// classes with JSON support.
/// 
/// 
library ebisu_dart_meta;

import "dart:io";
import "dart:json";
import "package:ebisu/ebisu.dart";
import "package:ebisu/ebisu_id.dart";
import "package:ebisu/ebisu_utils.dart" as EBISU_UTILS;
import "templates/dart_meta.dart" as META;
part "src/ebisu_dart_meta/meta.dart";

main() {
  print("Main for library ebisu_dart_meta");
  // custom <main ebisu_dart_meta>
  // end <main ebisu_dart_meta>
  
}
// custom <library ebisu_dart_meta>
// end <library ebisu_dart_meta>

